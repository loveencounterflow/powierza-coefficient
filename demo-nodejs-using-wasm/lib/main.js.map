{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nFS                        = require 'fs'\nPATH                      = require 'path'\n# { promisify }\n\n\n############################################################################################################\nif module is require.main then do =>\n  globalThis.alert          = alert\n  globalThis.help           = help\n  globalThis.urge           = urge\n  globalThis.info           = info\n  globalThis.debug          = debug\n  # globalThis.read_file      = FS.readFileSync\n  globalThis.read_file      = ( path ) ->\n    urge '^44877^', rpr path\n    # return FS.readFileSync path\n    return true\n  ### NOTE only works with `wasm-pack build --target nodejs` ###\n  RBW                 = require '../../pkg'\n  font_path           = 'EBGaramond08-Italic.otf'\n  font_path           = PATH.resolve PATH.join __dirname, '../../fonts', font_path\n  # font_path           = '/home/flow/io/mingkwai-rack/jizura-fonts/fonts/EBGaramond08-Italic.otf'\n  font_bytes          = FS.readFileSync font_path\n  font_bytes_hex      = font_bytes.toString 'hex'\n  RBW.set_font_bytes font_bytes_hex unless RBW.has_font_bytes()\n  # font_bytes_hex      = 'abcdefgh'\n  # format              = 'short'\n  format              = 'json'\n  # format              = 'rusty'\n  shy                 = '\\xad'\n  texts               = [\n    # \"a\"\n    \"affix\"\n    # \"af#fix\"\n    # \" \"\n    # \"#\"\n    # \"-\"\n    ]\n  echo \"\"\"<?xml version='1.0' encoding='UTF-8'?>\n    <svg xmlns='http://www.w3.org/2000/svg' width='6000' height='3000' viewBox='-100 -1500 5900 1500' version='2'>\"\"\"\n  # for text in texts\n  text        = texts[ 0 ]\n  text        = text.replace /#/g, shy\n  cfg         = { format, text, }\n  arrangement = JSON.parse RBW.shape_text cfg\n  gids        = new Set ( d.gid for d in arrangement )\n  debug '^3344^', gids\n  #.........................................................................................................\n  echo \"\"\"<style>\n    path {\n      stroke:                 red;\n      stroke-width:           3px;\n      fill:                   grey; }\n    rect {\n      stroke:                 green;\n      stroke-width:           3px;\n      fill:                   transparent; }\n      </style>\"\"\"\n  #.........................................................................................................\n  echo \"<defs>\"\n  for gid from gids.values()\n    outline = JSON.parse RBW.glyph_to_svg_pathdata gid\n    debug '^3344^', gid, outline\n    # continue if outline.pd is ''\n    echo \"<symbol overflow='visible' id='g#{gid}'><path d='#{outline.pd}'/></symbol>\"\n    echo \"<symbol overflow='visible' id='b#{gid}'>#{outline.br}</symbol>\"\n  echo \"</defs>\"\n  #.........................................................................................................\n  for d in arrangement\n    echo \"<use href='#g#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    echo \"<use href='#b#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    # echo \"<g x='#{d.x}' y='#{d.y + 1000}'>\"\n    # echo \"#{outline.br}\"\n    # echo \"</g>\"\n  #.........................................................................................................\n  echo \"</svg>\"\n  return null\n\n\n\n\n\n\n\n"
  ]
}