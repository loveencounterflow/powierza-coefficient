{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nFS                        = require 'fs'\nPATH                      = require 'path'\nRBW                       = require '../../pkg'\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_globals = ->\n  globalThis.alert          = alert\n  globalThis.help           = help\n  globalThis.urge           = urge\n  globalThis.info           = info\n  globalThis.debug          = debug\n  # globalThis.read_file      = ( path ) ->\n  #   urge '^44877^', rpr path\n  #   # return FS.readFileSync path\n  #   return true\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_resolve_font_path = ( me, font_path ) ->\n  return font_path if font_path.startsWith '/'\n  return PATH.resolve PATH.join __dirname, '../../fonts', font_path\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_font_bytes = ( me, font_path ) -> ( FS.readFileSync font_path ).toString 'hex'\n\n#-----------------------------------------------------------------------------------------------------------\n@register_font = ( me, fontnick ) ->\n  #.........................................................................................................\n  unless ( font_entry = me.fonts[ fontnick ] )?\n    throw new Error \"^1w37^ unknown fontnick #{rpr fontnick}\"\n  #.........................................................................................................\n  unless me._prv_fontidx < me._last_fontidx\n    throw new Error \"^1w37^ capacity of #{me._last_fontidx + 1} fonts exceeded\"\n  #.........................................................................................................\n  return R if ( R = font_entry.font_idx )?\n  #.........................................................................................................\n  R = me._prv_fontidx += 1\n  RBW.register_font R, @_get_font_bytes me, font_entry.path\n  font_entry.font_idx = R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_demo = ->\n  @_set_globals()\n  R =\n    shy:          '\\xad'\n    _prv_fontidx:   -1\n    _last_fontidx:  15\n    fonts:\n      garamond_italic:  { path: 'EBGaramond08-Italic.otf', }\n      amiri:            { path: 'arabic/Amiri-0.113/Amiri-Bold.ttf', }\n      tibetan:          { path: '/usr/share/fonts/truetype/tibetan-machine/TibetanMachineUni.ttf', }\n  #.........................................................................................................\n  for fontname, entry of R.fonts\n    R.fonts[ fontname ].font_idx  = null\n    R.fonts[ fontname ].path      = @_resolve_font_path null, entry.path\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_text_shaping = ->\n  whisper '^33443^ demo_text_shaping'\n  me                  = @new_demo()\n  fontnick            = 'garamond_italic'\n  font_idx            = @register_font me, fontnick\n  # format              = 'short'\n  format              = 'json'\n  # format              = 'rusty'\n  text                = \"a certain minimum\"\n  text                = text.replace /#/g, me.shy\n  cfg                 = { format, text, }\n  arrangement         = JSON.parse RBW.shape_text cfg\n  #.........................................................................................................\n  urge \"glyf IDs and positions of font #{rpr fontnick} for text #{rpr text}:\"\n  for d in arrangement\n    info '^223^', d\n  #.........................................................................................................\n  urge \"unique glyf IDs in this text:\"\n  gids                = new Set ( d.gid for d in arrangement )\n  debug '^3344^', gids\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_svg_typesetting = ->\n  whisper '^33443^ demo_svg_typesetting'\n  me        = @new_demo()\n  format    = 'json' # 'short', 'rusty'\n  #.........................................................................................................\n  fontnick  = 'tibetan';          text =  \"ཨོཾ་མ་ཎི་པདྨེ་ཧཱུྃ\"\n  fontnick  = 'amiri';            text = ( [ \"الخط الأمیری\"... ].reverse() ).join ''\n  fontnick  = 'garamond_italic';  text = \"a certain minimum\"\n  fontnick  = 'garamond_italic';  text = \"af#fix\"\n  #.........................................................................................................\n  font_idx  = @register_font me, fontnick\n  text      = text.replace /#/g, me.shy\n  #.........................................................................................................\n  echo \"\"\"<?xml version='1.0' encoding='UTF-8'?>\n    <svg xmlns='http://www.w3.org/2000/svg' width='6000' height='3000' viewBox='-100 -1500 10500 1500' version='2'>\"\"\"\n  cfg         = { format, text, }\n  arrangement = JSON.parse RBW.shape_text cfg\n  gids        = new Set ( d.gid for d in arrangement )\n  debug '^3344^', gids\n  #.........................................................................................................\n  echo \"\"\"<style>\n    path {\n      stroke:                 transparent;\n      stroke-width:           0mm;\n      fill:                   black;; }\n    rect {\n      stroke:                 transparent;\n      stroke-width:           0;\n      fill:                   transparent; }\n      </style>\"\"\"\n  # echo \"\"\"<style>\n  #   path {\n  #     stroke:                 black;\n  #     stroke-width:           8px;\n  #     fill:                   #880000bd;; }\n  #   rect {\n  #     stroke:                 black;\n  #     stroke-width:           3px;\n  #     fill:                   #ffeb3b42; }\n  #     </style>\"\"\"\n  #.........................................................................................................\n  echo \"<defs>\"\n  for gid from gids.values()\n    outline = JSON.parse RBW.glyph_to_svg_pathdata font_idx, gid\n    debug '^3344^', gid, outline.pd[ .. 100 ]\n    # continue if outline.pd is ''\n    echo \"<symbol overflow='visible' id='b#{gid}'>#{outline.br}</symbol>\"\n    echo \"<symbol overflow='visible' id='g#{gid}'><path d='#{outline.pd}'/></symbol>\"\n  echo \"</defs>\"\n  #.........................................................................................................\n  for d in arrangement\n    echo \"<use href='#g#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    echo \"<use href='#b#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    # echo \"<g x='#{d.x}' y='#{d.y + 1000}'>\"\n    # echo \"#{outline.br}\"\n    # echo \"</g>\"\n  #.........................................................................................................\n  echo \"</svg>\"\n  return null\n  whisper '^33443^ demo_text_wrapping'\n  me        = @new_demo()\n  text = \"\"\"Knuth–Liang hyphenation operates at the level of individual words, but there can be ambiguity as\n  to what constitutes a word. All hyphenation dictionaries handle the expected set of word-forming graphemes\n  from their respective alphabets, but some also accept punctuation marks such as hyphens and apostrophes,\n  and are thus capable of handling hyphen-joined compound words or elisions. Even so, it's generally\n  preferable to handle punctuation at the level of segmentation, as it affords greater control over the\n  final result (such as where to break hyphen-joined compounds, or whether to set a leading hyphen on new\n  lines).\n  在文本的显示中， 换行 （line wrap）是指文本在一行已满的情况下转到新行，使得每一行都能在窗口范围看到，不需要任何水平的滚动。 自动换行 （word wrap） 是 大 多 数 文 字 編 輯 器 、 文書處理器、和网页浏览器的一个附加功能。它用于在行间或一行里的单词间隔处分行，不考虑一个单词超过一行长度的情况。\n  \"\"\"\n  text          = \"The ela#bo#ra#te sphinx told me a rid#dle.\"\n  # text          = \"The elaborate sphinx told me a riddle.\"\n  #.........................................................................................................\n  text          = text.replace /#/g, me.shy\n  text          = text.replace /\\s+/g, ' '\n  width         = 10\n  lines         = RBW.wrap_text text, width\n  debug '^3383^', lines\n  return null\n  lines         = lines.split '\\n'\n  last_line_idx = lines.length - 1\n  debug '^449^', lines\n  for line, line_idx in lines\n    # debug '^499^', words\n    if line_idx < last_line_idx\n      line_length   = line.length\n      words         = line.split /\\s+/\n      last_word_idx = words.length - 1\n      loop\n        break if last_word_idx < 1\n        break if line_length >= width\n        for word_idx in [ 0 ... last_word_idx ]\n          # debug word_idx\n          break if line_length >= width\n          continue unless Math.random() > 0.5\n          line_length++\n          words[ word_idx ] += ' '\n      info words.join ' '\n    else\n      info line\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_text_wrapping_advanced = ->\n  me        = @new_demo()\n  slablines = JSON.parse RBW.wrap_text_with_arbitrary_slabs()\n  debug '^3334^', rpr slablines\n  for slabline in slablines.lines\n    info slabline\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_text_shaping()\n  # @demo_svg_typesetting()\n  # @demo_text_wrapping()\n  @demo_text_wrapping_advanced()\n  return null\n"
  ]
}