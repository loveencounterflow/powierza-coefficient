{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,EAAA,GAA4B,CAAE,OAAA,CAAQ,IAAR,CAAF,CAAgB,CAAC;;EAC7C,IAAA,GAA4B,OAAA,CAAQ,MAAR,EAhB5B;;;;;EAoBA,IAAC,CAAA,SAAD,GAAa,MAAA,QAAA,CAAE,IAAF,CAAA;AACb,QAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA;IAAE,GAAA,GACE;MAAA,UAAA,EAAY,CAAZ;MACA,SAAA,EAAW,CADX;MAEA,MAAA,EAAQ,IAAI,WAAW,CAAC,MAAhB,CAAuB;QAAE,OAAA,EAAS;MAAX,CAAvB,CAFR;MAGA,KAAA,EAAQ,IAAI,WAAW,CAAC,KAAhB,CAAsB;QAAE,OAAA,EAAS,CAAX;QAAc,OAAA,EAAS;MAAvB,CAAtB;IAHR;IAIF,IAAA,GAAc,CAAA,MAAM,EAAE,CAAC,QAAH,CAAY,IAAZ,CAAN;IACd,UAAA,GAAc,IAAI,UAAJ,CAAe,IAAf;IACd,MAAA,GAAc,CAAA,MAAM,WAAW,CAAC,WAAZ,CAAwB,UAAxB,CAAN,EAPhB;;;IAUE,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,IAA/B,CAAoC,GAApC,EAVF;AAWE,WAAO,MAAM,CAAC;EAZH,EApBb;;;EAoCA,IAAG,MAAA,KAAU,OAAO,CAAC,IAArB;IAAkC,CAAA,CAAA,CAAA,GAAA,EAAA;;AAClC,UAAA;MAAE,UAAU,CAAC,KAAX,GAAmB;MAEnB,IAAA,GAAO,OAAA,CAAQ,WAAR;MACP,IAAI,CAAC,KAAL,CAAW,UAAX;AACA,aAAO;IALyB,CAAA,IAAlC;;AApCA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nFS                        = ( require 'fs' ).promises\nPATH                      = require 'path'\n# { promisify }\n\n#-----------------------------------------------------------------------------------------------------------\n@load_wasm = ( path ) ->\n  env =\n    memoryBase: 0,\n    tableBase: 0,\n    memory: new WebAssembly.Memory { initial: 256, }\n    table:  new WebAssembly.Table { initial: 0, element: 'anyfunc', }\n  data        = await FS.readFile path\n  typedArray  = new Uint8Array data\n  result      = await WebAssembly.instantiate typedArray #, env.memory\n  # result      = await WebAssembly.instantiate typedArray, { env, }\n  # result  = await WebAssembly.instantiateStreaming data\n  result.instance.exports.memory.grow 400 # each page is 64kb in size\n  return result.instance\n\n\n############################################################################################################\nif module is require.main then do =>\n  globalThis.alert = alert\n  ### NOTE only works with `wasm-pack build --target nodejs` ###\n  HELO = require '../../pkg'\n  HELO.greet 'everyone'\n  return null\n\n\n\n\n\n\n\n"
  ]
}