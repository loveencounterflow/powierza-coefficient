{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nFS                        = require 'fs'\nPATH                      = require 'path'\nRBW                       = require '../../pkg'\nINTERTEXT                 = require 'intertext'\n{ to_width }              = require 'to-width'\n_border                   = CND.gold ( '█████     '.repeat 10 )\n\n#-----------------------------------------------------------------------------------------------------------\n@_set_globals = ->\n  _alert                    = alert\n  globalThis.alert          = ( P... ) =>\n    alert _border\n    alert()\n    _alert CND.reverse P...\n    alert()\n    alert _border\n  globalThis.help           = help\n  globalThis.urge           = urge\n  globalThis.info           = info\n  globalThis.debug          = debug\n  # globalThis.read_file      = ( path ) ->\n  #   urge '^44877^', rpr path\n  #   # return FS.readFileSync path\n  #   return true\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_resolve_font_path = ( me, font_path ) ->\n  return font_path if font_path.startsWith '/'\n  return PATH.resolve PATH.join __dirname, '../../fonts', font_path\n\n#-----------------------------------------------------------------------------------------------------------\n@_get_font_bytes = ( me, font_path ) -> ( FS.readFileSync font_path ).toString 'hex'\n\n#-----------------------------------------------------------------------------------------------------------\n@register_font = ( me, fontnick ) ->\n  #.........................................................................................................\n  unless ( font_entry = me.fonts[ fontnick ] )?\n    throw new Error \"^1w37^ unknown fontnick #{rpr fontnick}\"\n  #.........................................................................................................\n  unless me._prv_fontidx < me._last_fontidx\n    throw new Error \"^1w37^ capacity of #{me._last_fontidx + 1} fonts exceeded\"\n  #.........................................................................................................\n  return R if ( R = font_entry.font_idx )?\n  #.........................................................................................................\n  R           = me._prv_fontidx += 1\n  whisper \"^register_font@1^ reading font #{fontnick}...\"\n  font_bytes  = @_get_font_bytes me, font_entry.path\n  whisper \"^register_font@2^ ...done\"\n  whisper \"^register_font@3^ sending font #{fontnick} to registry...\"\n  RBW.register_font R, font_bytes\n  whisper \"^register_font@4^ ...done\"\n  font_entry.font_idx = R\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_demo = ->\n  @_set_globals()\n  R =\n    shy:          '\\xad'\n    _prv_fontidx:   -1\n    _last_fontidx:  15\n    fonts:\n      garamond_italic:  { path: 'EBGaramond08-Italic.otf', }\n      amiri:            { path: 'arabic/Amiri-0.113/Amiri-Bold.ttf', }\n      tibetan:          { path: '/usr/share/fonts/truetype/tibetan-machine/TibetanMachineUni.ttf', }\n      notoserif:        { path: 'NotoSerifJP/NotoSerifJP-Medium.otf', }\n    ### TAINT disregarding font, size for the moment ###\n    slab_widths: {}\n  #.........................................................................................................\n  for fontname, entry of R.fonts\n    R.fonts[ fontname ].font_idx  = null\n    R.fonts[ fontname ].path      = @_resolve_font_path null, entry.path\n  #.........................................................................................................\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_text_shaping = ->\n  whisper '^33443^ demo_text_shaping'\n  me                  = @new_demo()\n  fontnick            = 'garamond_italic'\n  font_idx            = @register_font me, fontnick\n  # format              = 'short'\n  format              = 'json'\n  # format              = 'rusty'\n  text                = \"a certain minimum\"\n  text                = text.replace /#/g, me.shy\n  cfg                 = { format, text, }\n  arrangement         = JSON.parse RBW.shape_text cfg\n  #.........................................................................................................\n  urge \"glyf IDs and positions of font #{rpr fontnick} for text #{rpr text}:\"\n  for d in arrangement\n    info '^223^', d\n  #.........................................................................................................\n  urge \"unique glyf IDs in this text:\"\n  gids                = new Set ( d.gid for d in arrangement )\n  debug '^3344^', gids\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_svg_typesetting = ->\n  whisper '^33443^ demo_svg_typesetting'\n  me        = @new_demo()\n  format    = 'json' # 'short', 'rusty'\n  #.........................................................................................................\n  fontnick  = 'tibetan';          text =  \"ཨོཾ་མ་ཎི་པདྨེ་ཧཱུྃ\"\n  fontnick  = 'amiri';            text = ( [ \"الخط الأمیری\"... ].reverse() ).join ''\n  fontnick  = 'garamond_italic';  text = \"a certain minimum\"\n  fontnick  = 'garamond_italic';  text = \"af#fix\"\n  #.........................................................................................................\n  font_idx  = @register_font me, fontnick\n  text      = text.replace /#/g, me.shy\n  #.........................................................................................................\n  echo \"\"\"<?xml version='1.0' encoding='UTF-8'?>\n    <svg xmlns='http://www.w3.org/2000/svg' width='6000' height='3000' viewBox='-100 -1500 10500 1500' version='2'>\"\"\"\n  cfg         = { format, text, }\n  arrangement = JSON.parse RBW.shape_text cfg\n  gids        = new Set ( d.gid for d in arrangement )\n  debug '^3344^', gids\n  #.........................................................................................................\n  echo \"\"\"<style>\n    path {\n      stroke:                 transparent;\n      stroke-width:           0mm;\n      fill:                   black;; }\n    rect {\n      stroke:                 transparent;\n      stroke-width:           0;\n      fill:                   transparent; }\n      </style>\"\"\"\n  # echo \"\"\"<style>\n  #   path {\n  #     stroke:                 black;\n  #     stroke-width:           8px;\n  #     fill:                   #880000bd;; }\n  #   rect {\n  #     stroke:                 black;\n  #     stroke-width:           3px;\n  #     fill:                   #ffeb3b42; }\n  #     </style>\"\"\"\n  #.........................................................................................................\n  echo \"<defs>\"\n  for gid from gids.values()\n    outline = JSON.parse RBW.glyph_to_svg_pathdata font_idx, gid\n    debug '^3344^', gid, outline.pd[ .. 100 ]\n    # continue if outline.pd is ''\n    echo \"<symbol overflow='visible' id='b#{gid}'>#{outline.br}</symbol>\"\n    echo \"<symbol overflow='visible' id='g#{gid}'><path d='#{outline.pd}'/></symbol>\"\n  echo \"</defs>\"\n  #.........................................................................................................\n  for d in arrangement\n    echo \"<use href='#g#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    echo \"<use href='#b#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    # echo \"<g x='#{d.x}' y='#{d.y + 1000}'>\"\n    # echo \"#{outline.br}\"\n    # echo \"</g>\"\n  #.........................................................................................................\n  echo \"</svg>\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_text_wrapping_advanced = ->\n  me        = @new_demo()\n  ### TAINT use triplets `[m,w,p,]` (material width, whitespace width, penalty width) instead to make JSON significantly smaller ###\n  slabs     = [\n    { width: 5,   whitespace_width: 1, penalty_width: 1, },\n    { width: 3,   whitespace_width: 1, penalty_width: 1, },\n    { width: 4,   whitespace_width: 1, penalty_width: 1, },\n    { width: 2,   whitespace_width: 1, penalty_width: 1, },\n    { width: 5,   whitespace_width: 1, penalty_width: 1, },\n    { width: 10,  whitespace_width: 1, penalty_width: 1, }, ];\n  slablines = JSON.parse RBW.wrap_text_with_arbitrary_slabs slabs\n  debug '^3334^', rpr slablines\n  for slabline in slablines.lines\n    info slabline\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@find_widths_from_slabs = ( me, slabs ) ->\n  debug '^443^', slabs\n  new_slabs = new Set()\n  for slab_text, slab_idx in slabs.slabs\n    end       = slabs.ends[ slab_idx ]\n    slab_code = slab_text + end\n    continue if me.slab_widths[ slab_code ]?\n    switch end\n      when '_'\n        new_slabs.add slab_text # + ''\n      when '|'\n        new_slabs.add slab_text # + ''\n        new_slabs.add slab_text + '-'\n      when 'x'\n        new_slabs.add slab_text # + ''\n  debug '^3344^', new_slabs\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@get_font_metrics = ( me, font_idx ) ->\n  ### TAINT cache font metrics ###\n  ### TAINT validate arguments, results ###\n  format      = 'json'\n  text        = \" - –\"\n  arrangement = JSON.parse RBW.shape_text { font_idx, text, format, }\n  space       = arrangement[ 0 ]\n  hyphen      = arrangement[ 1 ]\n  endash      = arrangement[ 3 ]\n  # debug '^get_font_metrics@445^', arrangement\n  return {\n    space:  { gid: space.gid, dx: space.dx},\n    hyphen: { gid: hyphen.gid, dx: hyphen.dx},\n    endash: { gid: endash.gid, dx: endash.dx}, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_firstchr = ( buffer, idx ) ->\n  ### Return the first character found in buffer at given position, assuming UTF-8. ###\n  return ( Array.from buffer[ idx ... idx + 4 ].toString() )[ 0 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_slice_buffer = ( buffer, start_idx, stop_idx ) ->\n  return buffer[ start_idx ... stop_idx ].toString()\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_typesetting = ->\n  me        = @new_demo()\n  whisper '^33443^ demo_typesetting'\n  #.........................................................................................................\n  text = \"\"\"Knuth–Liang hyphenation operates at the level of individual words, but there can be ambiguity as\n  to what constitutes a word. All hyphenation dictionaries handle the expected set of word-forming graphemes\n  from their respective alphabets, but some also accept punctuation marks such as hyphens and apostrophes,\n  and are thus capable of handling hyphen-joined compound words or elisions. Even so, it's generally\n  preferable to handle punctuation at the level of segmentation, as it affords greater control over the\n  final result (such as where to break hyphen-joined compounds, or whether to set a leading hyphen on new\n  lines).\n  在文本的显示中， 换行 （line wrap）是指文本在一行已满的情况下转到新行，使得每一行都能在窗口范围看到，不需要任何水平的滚动。 自动换行 （word wrap） 是 大 多 数 文 字 編 輯 器 、 文書處理器、和网页浏览器的一个附加功能。它用于在行间或一行里的单词间隔处分行，不考虑一个单词超过一行长度的情况。\n  \"\"\"\n  # text          = \"Knuth–Liang hyphenation\" ## en-dash U+2013 ###\n  # text          = \"Knuth-Liang hyphenation\" ### hyphen-minus U+002d ###\n  # text          = \"今日も明日も。\"\n  # text          = \"The elaborate sphinx told me a riddle, told me a riddle, told me a riddle.\"\n  text          = \"the affixation\"\n  # text          = \"affix\"\n  help \"^33376^ text:\", to_width ( rpr text ), 100\n  #.........................................................................................................\n  line_width    = 6 * 500;\n  # fontnick      = 'notoserif'\n  fontnick      = 'garamond_italic'\n  font_idx      = @register_font me, fontnick\n  fm            = @get_font_metrics me, font_idx\n  info '^222332^', \"fontnick: #{rpr fontnick}\"\n  info '^222332^', \"font metric: #{rpr fm}\"\n  #.........................................................................................................\n  ### Prepare text: normalize whitespace (replace incidental newlines, repeated blanks), then hyphenate it.\n  Prepare a buffer so we access the underlying raw bytes (`RBW.find_line_break_positions()` and\n  `RBW.shape_text()` both return positions into the raw bytes). Find the line break opportunities (LBOs) as\n  a list of byte indexes: ###\n  text          = text.replace /\\s+/g, ' '\n  text          = INTERTEXT.HYPH.hyphenate text\n  text_bfr      = Buffer.from text, { encoding: 'utf-8', }\n  lbo_starts    = JSON.parse RBW.find_line_break_positions text\n  help \"^33376^ lbo_starts:\", lbo_starts\n  #.........................................................................................................\n  ### We have made it so that the LBO indexes always start with zero and end with the index to the first\n  byte after the end of the buffer; hence, we can 'hydrate' the raw indices by looking at the current and\n  the following index to find the corresponding 'chunk' (i.e. the piece of text that stretches from the\n  previous to the upcomping line break opportunity). Each chunk in turn will, after text shaping, correspond\n  to any number of glyf outlines ('shapes'), so we provide a list for them: ###\n  shape_batches = []\n  for batch_idx in [ 0 ... lbo_starts.length - 1 ]\n    lbo_start     = lbo_starts[ batch_idx ]\n    lbo_stop      = lbo_starts[ batch_idx + 1 ]\n    chunk         = @_slice_buffer text_bfr, lbo_start, lbo_stop\n    chunk         = chunk.replace /\\xad/g, '|'\n    shape_batch   = { lbo_start, lbo_stop, chunk, shapes: [], }\n    shape_batches.push shape_batch\n    urge '^454-1^', lbo_start, ( rpr chunk ), shape_batch\n  help \"^33376^ shape_batches:\", shape_batches\n  #.........................................................................................................\n  ### Now we shape the text. Observe that any number of Unicode codepoints may correspond to any number\n  of visible and invisible outlines with any kind of relationship between codepoints and glyf IDs depending\n  on the font and the exact sequence of codepoints. This is especially apparent in so-called 'complex\n  scripts' like Arabic and Devanagari, but also present in Latin scripts where ligatures are present. These\n  ligatures will later on reqquire our attention because they crucially depend on the results of line\n  wrapping (e.g. `affix` may be written out with a `ﬃ` ligature when being unhyphenated, but end up as\n  `af-`, `ﬁx` when wrapped across two lines). This in turn will result in either incorrect shaping or\n  incorrect line wrapping, so should be dealt with. ###\n  shapes    = JSON.parse RBW.shape_text { font_idx, text, format: 'json', }\n  # help \"^33376^ shapes:\", shapes\n  #.........................................................................................................\n  ### Bring the chunks that fall out from LBO analysis together with the shapes (positioned outlines)\n  that result from text shaping: ###\n  batch_idx = 0\n  batch     = shape_batches[ batch_idx ]\n  for shape in shapes\n    if shape.bidx >= batch.lbo_stop\n      batch_idx++\n      batch = shape_batches[ batch_idx ]\n      unless batch.lbo_start <= shape.bidx < batch.lbo_stop\n        throw new Error \"^3332^ POD #{rpr shape} does not fit into shape batch #{rpr batch}\"\n    batch.shapes.push shape\n    # urge '^3332^', batch\n  #.........................................................................................................\n  ### Show shape batches: ###\n  for shape_batch in shape_batches\n    { lbo_start, lbo_stop, chunk, } = shape_batch\n    help '^3334^ shape_batch:', { lbo_start, lbo_stop, chunk, shapes: '...', }\n    for shape in shape_batch.shapes\n      info \"  ^3334^ shape: #{rpr shape}\"\n  #.........................................................................................................\n  ### Perform line wrapping: ###\n  slabs = []\n  for shape_batch in shape_batches\n    { shapes  } = shape_batch\n    first_textshape = shapes[ 0 ]\n    last_textshape  = shapes[ shapes.length - 1 ]\n    width           = ( last_textshape.x + last_textshape.dx ) - first_textshape.x\n    ### TAINT incorrect of course ###\n    slab            = { width, whitespace_width: fm.space.dx, penalty_width: fm.hyphen.dx, }\n    debug '^3345^', slab\n    slabs.push slab\n  slablines = JSON.parse RBW.wrap_text_with_arbitrary_slabs slabs, line_width\n  #.........................................................................................................\n  ### Show shape batches: ###\n  # urge \"^3334^ slablines:\", slablines\n  for slabline, slabline_idx in slablines.lines\n    urge \"^3334^ line# #{slabline_idx + 1} slabline: #{rpr slabline}\"\n    for slab_idx in [ slabline.first_slab_idx ... slabline.last_slab_idx ]\n      # for shape_idx in\n      info \"  ^3334^ slab: #{rpr slabs[slab_idx]}\"\n  return null\n  # slabs     = [\n  #   { width: 5,   whitespace_width: 1, penalty_width: 1, },\n  #   { width: 3,   whitespace_width: 1, penalty_width: 1, },\n  #   { width: 4,   whitespace_width: 1, penalty_width: 1, },\n  #   { width: 2,   whitespace_width: 1, penalty_width: 1, },\n  #   { width: 5,   whitespace_width: 1, penalty_width: 1, },\n  #   { width: 10,  whitespace_width: 1, penalty_width: 1, }, ];\n  #.........................................................................................................\n  ### Write SVG: ###\n  #.........................................................................................................\n  #.........................................................................................................\n  #.........................................................................................................\n  lines         = RBW.wrap_text text, line_width\n  debug '^3383^', lines\n  lines         = lines.split '\\n'\n  last_line_idx = lines.length - 1\n  debug '^449^', lines\n  for line, line_idx in lines\n    # debug '^499^', words\n    if line_idx < last_line_idx\n      line_length   = line.length\n      words         = line.split /\\s+/\n      last_word_idx = words.length - 1\n      loop\n        break if last_word_idx < 1\n        break if line_length >= line_width\n        for word_idx in [ 0 ... last_word_idx ]\n          # debug word_idx\n          break if line_length >= line_width\n          continue unless Math.random() > 0.5\n          line_length++\n          words[ word_idx ] += ' '\n      info words.join ' '\n    else\n      info line\n  return null\n\n\n############################################################################################################\nif module is require.main then do =>\n  # @demo_text_shaping()\n  @demo_svg_typesetting()\n  # @demo_text_wrapping()\n  # @demo_text_wrapping_advanced()\n  # @demo_typesetting()\n  debug '^36972^', ( k for k of RBW )\n  return null\n\n\n\n"
  ]
}