{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DEMO-HARFBUZZJS'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\necho                      = CND.echo.bind CND\nFS                        = require 'fs'\nPATH                      = require 'path'\nRBW                       = require '../../pkg'\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_text_shaping = ->\n  globalThis.alert          = alert\n  globalThis.help           = help\n  globalThis.urge           = urge\n  globalThis.info           = info\n  globalThis.debug          = debug\n  # globalThis.read_file      = FS.readFileSync\n  globalThis.read_file      = ( path ) ->\n    urge '^44877^', rpr path\n    # return FS.readFileSync path\n    return true\n  font_path           = 'EBGaramond08-Italic.otf'\n  # font_path           = 'arabic/Amiri-0.113/Amiri-Bold.ttf'\n  font_path           = PATH.resolve PATH.join __dirname, '../../fonts', font_path\n  # font_path           = '/usr/share/fonts/truetype/tibetan-machine/TibetanMachineUni.ttf'\n  font_bytes          = FS.readFileSync font_path\n  font_bytes_hex      = font_bytes.toString 'hex'\n  RBW.set_font_bytes font_bytes_hex unless RBW.has_font_bytes()\n  # format              = 'short'\n  format              = 'json'\n  # format              = 'rusty'\n  shy                 = '\\xad'\n  texts               = [\n    # \"a\"\n    # \"affix\"\n    # \"ཨོཾ་མ་ཎི་པདྨེ་ཧཱུྃ\"\n    # ( [ \"الخط الأمیری\"... ].reverse() ).join ''\n    \"a certain minimum\"\n    # \"af#fix-\"\n    # \" \"\n    # \"#\"\n    # \"-\"\n    ]\n  echo \"\"\"<?xml version='1.0' encoding='UTF-8'?>\n    <svg xmlns='http://www.w3.org/2000/svg' width='6000' height='3000' viewBox='-100 -1500 10500 1500' version='2'>\"\"\"\n  # for text in texts\n  text        = texts[ 0 ]\n  text        = text.replace /#/g, shy\n  cfg         = { format, text, }\n  arrangement = JSON.parse RBW.shape_text cfg\n  gids        = new Set ( d.gid for d in arrangement )\n  debug '^3344^', gids\n  #.........................................................................................................\n  echo \"\"\"<style>\n    path {\n      stroke:                 transparent;\n      stroke-width:           0mm;\n      fill:                   black;; }\n    rect {\n      stroke:                 transparent;\n      stroke-width:           0;\n      fill:                   transparent; }\n      </style>\"\"\"\n  # echo \"\"\"<style>\n  #   path {\n  #     stroke:                 black;\n  #     stroke-width:           8px;\n  #     fill:                   #880000bd;; }\n  #   rect {\n  #     stroke:                 black;\n  #     stroke-width:           3px;\n  #     fill:                   #ffeb3b42; }\n  #     </style>\"\"\"\n  #.........................................................................................................\n  echo \"<defs>\"\n  for gid from gids.values()\n    outline = JSON.parse RBW.glyph_to_svg_pathdata gid\n    debug '^3344^', gid, outline.pd[ .. 100 ]\n    # continue if outline.pd is ''\n    echo \"<symbol overflow='visible' id='b#{gid}'>#{outline.br}</symbol>\"\n    echo \"<symbol overflow='visible' id='g#{gid}'><path d='#{outline.pd}'/></symbol>\"\n  echo \"</defs>\"\n  #.........................................................................................................\n  for d in arrangement\n    echo \"<use href='#g#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    echo \"<use href='#b#{d.gid}' x='#{d.x}' y='#{d.y}'/>\"\n    # echo \"<g x='#{d.x}' y='#{d.y + 1000}'>\"\n    # echo \"#{outline.br}\"\n    # echo \"</g>\"\n  #.........................................................................................................\n  echo \"</svg>\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_text_wrapping = ->\n\n  text = \"\"\"Knuth–Liang hyphenation operates at the level of individual words, but there can be ambiguity as\n  to what constitutes a word. All hyphenation dictionaries handle the expected set of word-forming graphemes\n  from their respective alphabets, but some also accept punctuation marks such as hyphens and apostrophes,\n  and are thus capable of handling hyphen-joined compound words or elisions. Even so, it's generally\n  preferable to handle punctuation at the level of segmentation, as it affords greater control over the\n  final result (such as where to break hyphen-joined compounds, or whether to set a leading hyphen on new\n  lines).\n  在文本的显示中， 换行 （line wrap）是指文本在一行已满的情况下转到新行，使得每一行都能在窗口范围看到，不需要任何水平的滚动。 自动换行 （word\n  wrap）是大多数文字編輯器、文書處理器、和网页浏览器的一个附加功能。它用于在行间或一行里的单词间隔处分行，不考虑一个单词超过一行长度的情况。\n  \"\"\"\n\n  text          = text.replace /\\s+/g, ' '\n  width         = 50\n  lines         = RBW.wrap_text text, width\n  lines         = lines.split '\\n'\n  last_line_idx = lines.length - 1\n  debug '^449^', lines\n  for line, line_idx in lines\n    # debug '^499^', words\n    if line_idx < last_line_idx\n      line_length   = line.length\n      words         = line.split /\\s+/\n      last_word_idx = words.length - 1\n      loop\n        break if last_word_idx < 1\n        break if line_length >= width\n        for word_idx in [ 0 ... last_word_idx ]\n          # debug word_idx\n          break if line_length >= width\n          continue unless Math.random() > 0.5\n          line_length++\n          words[ word_idx ] += ' '\n      info words.join ' '\n    else\n      info line\n  return null\n\n\n\n\n############################################################################################################\nif module is require.main then do =>\n  @demo_text_wrapping()\n\n"
  ]
}